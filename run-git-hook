#!/bin/bash
#
# Copyright (c) 2010-2012, Benjamin C. Meyer <ben@meyerhome.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

function hook_dirs
{
    if [ ! -z "${1}" ] ; then
        hook="/${1}"
    else
        hook=""
    fi
    echo "${PWD}/all${hook}"
    #echo "${HOME}/.git_hooks${hook}"
    #GITDIR=`git rev-parse --git-dir`
    #cd $GITDIR/..
    #echo "${PWD}/git_hooks${hook}"
    #echo "${PWD}/.githooks${hook}"
    #eval echo "`git config hooks.global`"${hook}
}

function list_hooks_in_dir
{
    find -L "${1}/" -perm +111 -type f 2>/dev/null | grep -v "^.$" | sort
}

function run_hooks
{
    dir="${1}"
    if [[ -z ${dir} || ! -d "${dir}" ]] ; then
        echo "run_hooks requires a directory name as an argument."
        return 1
    fi
    shift 1
    for hook in `list_hooks_in_dir "${dir}"`
    do
        export last_run_hook="${hook} $@"
        if [ ! -z ${GIT_HOOKS_VERBOSE} ] ; then
            echo -n "@@ Running hook: "
            echo -n `basename \`dirname "${hook}"\``
            echo "/`basename "${hook}"`"
        fi
        ${hook} "$@"
    done
}

function run_hook
{
    set -e
    hook=`basename "${1}"`
    if [ -z ${hook} ] ; then
        echo "run requires a hook argument"
        return 1
    fi
    shift 1
    for dir in `hook_dirs "${hook}"`; do
        echo "dir: $dir"
        if [ ! -d "${dir}" ] ; then
            continue
        fi
        run_hooks "${dir}" "$@"
    done
    set +e
}

function report_error {
    echo "Hook failed: $last_run_hook"
    exit 1
}

if [ ! -z "${GIT_DIR}" ] ; then
    unset GIT_DIR
fi
trap report_error ERR
run_hook "$@"
